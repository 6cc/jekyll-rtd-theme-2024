<textarea rows="20" cols="60" id="code">
</textarea>

<script>
	const uniqueLauncher = () => {
  const docQuerySel = document.querySelector('div#triggerField');
  docQuerySel === null ? preprocessObj() : console.log(
    'already entity');
};

const preprocessObj = (x, y) => {
  const strUrl = 'https://6cc.github.io/3/6son.md';
  getFile(strUrl);
  preprocessPrecast();
};

const getFile = async (fileURL, targetElem) => {
  const response = await fetch(fileURL);
  const docData = await response.text();

const navMenu = document.createElement('ul');
navMenu.className = 'nav-menu';
document.body.appendChild(navMenu);
  

const navMen = decomposeReconstruct(docData);

navMenu.appendChild(navMen);
};

const decomposeReconstruct = (rawInput) => {
  const paraSFromDoc = arrSpliter(rawInput, '>　　　　　　　　');

let fragment = document.createDocumentFragment();
  
  for (let i = 1; i < paraSFromDoc.length; i++) {
    const lineSFromPara = arrSpliter(paraSFromDoc[i], '\n');
    const navButtonS = arrSpliter(lineSFromPara[0], ',');

    const navMenu = assembleMenuUnit(navButtonS[1]);
    const ulTag = document.createElement('ul');
    navMenu.appendChild(ulTag);
    
fragment.appendChild(navMenu);
    for (let j = 1; j < lineSFromPara.length; j++) {
      const strSFromline = arrSpliter(lineSFromPara[j], ',');
      const navMenu = assembleMenuUnit(strSFromline[1]);
      ulTag.appendChild(navMenu);
    }
  }
  
  
  console.log(fragment);
  return fragment;
};

const arrSpliter = (textInput, charSpliter) => {
  const arrOutput = textInput.trim().split(charSpliter);
  return arrOutput;
};

const assembleMenuUnit = (textCont) => {
  const liTag = document.createElement('li');
  const aTag = document.createElement('a');
  aTag.href = '';
  aTag.textContent = textCont;
  liTag.appendChild(aTag);
  return liTag;
};

const createMenu = (text, withSub) => {
  const liTag = createNav(text);
  if (withSub) {
    const ulTag = document.createElement('ul');
    liTag.appendChild(ulTag);
    const subLi = createNav(withSub);
    ulTag.appendChild(subLi);
  }
  return liTag;
};

const createNav = (textCont) => {
  const liTag = document.createElement('li');
  const aTag = document.createElement('a');
  aTag.href = '';
  aTag.textContent = textCont;
  liTag.appendChild(aTag);
  return liTag;
};

const preprocessPrecast = () => {
  const navMenu = document.createElement('ul');
  navMenu.className = 'nav-menu';
  document.body.appendChild(navMenu);
};

if (document.body) {
  uniqueLauncher();
} else {
  document.addEventListener("DOMContentLoaded", () => {
    uniqueLauncher();

  });
}
</script>

<style>
	/* nav */
	.nav-menu,
	.nav-menu ul,
	.nav-menu li,
	.nav-menu a {
		margin: 0;
		padding: 0;
		line-height: normal;
		list-style: none;
		display: block;
		position: relative;
	}

	.nav-menu ul {
		opacity: 0;
		position: absolute;
		bottom: 100%;
		left: -9999px;
		z-index: 999;
		-webkit-transition: opacity .3s;
		transition: opacity .3s;
	}

	.nav-menu li:hover>ul {
		left: 0;
		opacity: 1;
		z-index: 1000;
	}

	.nav-menu ul li:hover>ul {
		bottom: 0;
		left: 100%;
	}

	.nav-menu li {
		cursor: default;
		float: left;
		white-space: nowrap;
	}

	.nav-menu ul li {
		float: none;
	}

	/* sub width */
	.nav-menu ul {
		min-width: 12em;
		-webkit-box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
		box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
	}

	/* center */
	.nav-center {
		float: right;
		right: 50%;
	}

	.nav-center>li {
		left: 50%;
	}

	/* root */
	.nav-menu a {
		padding: 0 10px;
		color: #5BC0DE;
		font-weight: normal;
		font-size: 16px;
		line-height: 40px;
		text-decoration: none;
	}

	/* root: active */
	.nav-menu>li>.nav-active {
		background-color: rgba(0, 0, 0, 0.05);
	}

	/* root: hover/persistence */
	.nav-menu a:hover,
	.nav-menu a:focus,
	.nav-menu li:hover a {
		background: #555;
		color: #FFF;
	}

	/* 2 */
	.nav-menu li li a,
	.nav-menu li:hover li a {
		padding: 8px 10px;
		background: #555;
		color: #FFF;
		font-size: 12px;
		line-height: normal;
	}

	/* 2: hover/persistence */
	.nav-menu li:hover li a:hover,
	.nav-menu li:hover li a:focus,
	.nav-menu li:hover li:hover a {
		background: #444;
	}

	/* 3 */
	.nav-menu li:hover li:hover li a {
		background: #444;
	}

	/* 3: hover/persistence */
	.nav-menu li:hover li:hover li a:hover,
	.nav-menu li:hover li:hover li a:focus,
	.nav-menu li:hover li:hover li:hover a {
		background: #333;
	}

	/* 4 */
	.nav-menu li:hover li:hover li:hover li a {
		background: #333;
	}

	/* 4: hover */
	.nav-menu li:hover li:hover li:hover li a:hover,
	.nav-menu li:hover li:hover li:hover li a:focus {
		background: #222;
	}

	/* vertical */
	.nav-vertical {
		max-width: 220px;
	}

	.nav-vertical ul {
		top: 0;
		left: -9999px;
	}

	.nav-vertical li {
		width: 100%;
		float: none;
	}

	.nav-vertical li:hover>ul {
		left: 100%;
	}
</style>